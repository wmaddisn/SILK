/* SILK source code.  Copyright 2007-2009 W. Maddison and M. Ramirez. Disclaimer:  The Mesquite source code is lengthy and we are few.  There are no doubt inefficiencies and goofs in this code. The commenting leaves much to be desired. Please approach this source code with the spirit of helping out.Perhaps with your help we can be more than a few, and make Mesquite better.Mesquite is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY.Mesquite's web site is http://mesquiteproject.orgThis source code and its compiled class files are free and modifiable under the terms of GNU Lesser General Public License.  (http://www.gnu.org/copyleft/lesser.html) */package mesquite.silk.CharListStandardView;/*~~  */import mesquite.lists.lib.*;import java.awt.*;import mesquite.lib.*;import mesquite.lib.table.*;import mesquite.lib.characters.*;import mesquite.silk.IndexedCellImages.IndexedCellImages;/* ======================================================================== */public class CharListStandardView extends CharListAssistant {	CharacterData data;	IndexedCellImages source;	ListableVector v;	Listened listen;	/*.................................................................................................................*/	public String getName() {		return "Standard View";	}	public String getExplanation() {		return "Lists the standard view as defined by a cell image source (part of the SILK package)." ;	}	/*.................................................................................................................*/	MesquiteTable table=null;	NameReference anr = NameReference.getNameReference("StandardView");	/*.................................................................................................................*/	public boolean startJob(String arguments, Object condition, boolean hiredByName) {		if (!MesquiteThread.isScripting()){			v = findModulesWithDuty(IndexedCellImages.class);			if (v == null)				return sorry(getName() + " cannot start because you must first have a Character Matrix Editor active with Cell Info Panel showing");		}		return true;	}	public void endJob(){		super.endJob();		if (listen != null)			listen.removeListener(this);	}	public void fileReadIn(MesquiteFile file){		setup();	}	/*.................................................................................................................*/	public void setTableAndData(MesquiteTable table, CharacterData data){		this.data = data;		this.table = table;	}	private void setup(){		if (source != null)			return;		v = findModulesWithDuty(IndexedCellImages.class);		if (v == null)			return;		for (int i=0; i<v.size(); i++){			source = (IndexedCellImages)v.elementAt(i);			if (source.getData() == data) {				listen = source.getParametersChangedNotifier();				listen.addListener(this);				parametersChanged();				return;			}		}		source = null;	}	/*.................................................................................................................*/	/** passes which object changed, along with optional integer (e.g. for character) (from MesquiteListener interface)*/	public void changed(Object caller, Object obj, Notification notification){		int code = Notification.getCode(notification);		int[] parameters = Notification.getParameters(notification);		if (obj == listen) {			parametersChanged();		}
		super.changed(caller, obj, notification);
	}	public String getTitle() {		return "Standard View";	}	/*...............................................................................................................*/	/** returns whether or not a cell of table is editable.*/	public boolean isCellEditable(int row){		return true;	}	/*...............................................................................................................*/	/** for those permitting editing, indicates user has edited to incoming string.*/	public void setString(int row, String s){		if (data!=null) {			String already = getIndexString(row);			if (already != null && s != null && already.equals(s))				return;			data.setAssociatedObject(anr, row, s);		}	}	public Color getBackgroundColorOfCell(int ic, boolean selected){		if (data!=null) {			Object n = data.getAssociatedObject(anr, ic);			if (n !=null)				return ColorDistribution.veryLightGreen;			setup();			if (source == null)				return Color.white;			int[] s = source.getStandardViews(data.getUniqueID(ic), ic);			if (s != null){				return ColorDistribution.veryLightBlue;			}		}		return Color.orange;	}	private String getIndexString(int ic){		setup();		if (source == null)			return null;		String[] s = source.getStandardViewNames(data.getUniqueID(ic), ic);		if (s != null){			String sv = "";			for (int i=0; i<s.length; i++){				if (i>0)					sv += ", ";				sv += s[i];			}			return sv;		}		return null;	}	public String getStringForCharacter(int ic){		if (data!=null) {			Object n = data.getAssociatedObject(anr, ic);			if (n !=null)				return ((String)n);			setup();			if (source == null)				return "-";			String sv = getIndexString(ic);			if (sv != null)				return sv;		}		return "-";	}	public boolean useString(int ic){		return true;	}	public String getWidestString(){		return "88888888888888888  ";	}	/*.................................................................................................................*/	public boolean isPrerelease(){		return false;  	}	/*.................................................................................................................*/	/** returns the version number at which this module was first released.  If 0, then no version number is claimed.  If a POSITIVE integer	 * then the number refers to the Mesquite version.  This should be used only by modules part of the core release of Mesquite.	 * If a NEGATIVE integer, then the number refers to the local version of the package, e.g. a third party package*/	public int getVersionOfFirstRelease(){		return 120;  	}	/*.................................................................................................................*/	/** returns whether this module is requesting to appear as a primary choice */	public boolean requestPrimaryChoice(){		return true;  	}}