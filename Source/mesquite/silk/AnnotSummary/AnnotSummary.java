/* SILK source code.  Copyright 2007-2009 W. Maddison and M. Ramirez.  Disclaimer:  The Mesquite source code is lengthy and we are few.  There are no doubt inefficiencies and goofs in this code. The commenting leaves much to be desired. Please approach this source code with the spirit of helping out.Perhaps with your help we can be more than a few, and make Mesquite better.Mesquite is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY.Mesquite's web site is http://mesquiteproject.orgThis source code and its compiled class files are free and modifiable under the terms of GNU Lesser General Public License.  (http://www.gnu.org/copyleft/lesser.html)*/package mesquite.silk.AnnotSummary; import java.awt.*;import mesquite.lib.*;import mesquite.lib.characters.*;import mesquite.lib.duties.*;import mesquite.lib.table.*;/** ======================================================================== */public class AnnotSummary extends DataWindowAssistantID {	CharacterData data;	MesquiteTable matrixTable;	HTMLSidePanel panel;//	DWTable table;	MesquiteBoolean showPanel;	MesquiteCommand resetTextCommand;	/*.................................................................................................................*/	public boolean startJob(String arguments, Object condition, boolean hiredByName){		showPanel = new MesquiteBoolean(false);		addCheckMenuItem(null, "Show Annotations Summary", makeCommand("togglePanel", this), showPanel);		resetTextCommand = new MesquiteCommand("resetText", this);		return true;	}	/*.................................................................................................................*/  	 public Snapshot getSnapshot(MesquiteFile file) {   	 	Snapshot temp = new Snapshot();  	 	temp.addLine("togglePanel " + showPanel.toOffOnString());  	 	return temp;  	 }	/*.................................................................................................................*/    	 public Object doCommand(String commandName, String arguments, CommandChecker checker) {    	 	if (checker.compare(this.getClass(), "Sets whether or not the annotations panel is shown", "[on = shown; off]", commandName, "togglePanel")) {    	 		showPanel.toggleValue(parser.getFirstToken(arguments));			setPanel();    	 	}    	 	else if (checker.compare(this.getClass(), "resets text in panel", "[html string]", commandName, "resetText")) {    	 		String text = parser.getFirstToken(arguments);    	 		if (panel != null)    	 			panel.setText(text);    	 	}    	 	else    	 		return  super.doCommand(commandName, arguments, checker);		return null;   	 }	/*.................................................................................................................*/	/*.................................................................................................................*/   	 public boolean isSubstantive(){   	 	return false;   	 }   	 public void viewChanged(){   	 }   	 	public void setTableAndData(MesquiteTable table, CharacterData data){		this.matrixTable = table;		this.data = data;				setPanel();	}	void setPanel(){		MesquiteWindow f = containerOfModule();		if (f instanceof TableWindow){			if (showPanel.getValue()){				if (panel == null)					panel = new HTMLSidePanel(this, "Annotations");				((TableWindow)f).addSidePanel(panel, HTMLSidePanel.width);		//		table = panel.getTable();			}			else {				if (panel != null)					((TableWindow)f).removeSidePanel(panel);			}		}			}	/*.................................................................................................................*/   	public boolean hasDisplayModifications(){   		return false;   	}	NameReference notesNameRef = NameReference.getNameReference("notes");	int lastIC = -1;	int lastIT = -1;	/*.................................................................................................................*/   	public void focusInCell(int ic, int it){   		if (data == null || panel == null)   			return;   		if (ic == lastIC && lastIT == it)   			return;   		lastIC = ic;   		lastIT = it;		AttachedNotesVector anv = null;		String objectName = "";		if (ic<0) {			anv = (AttachedNotesVector)data.getTaxa().getAssociatedObject(notesNameRef, it);			objectName = data.getTaxa().getTaxonName(it);		}		else if (it < 0){			anv = (AttachedNotesVector)data.getAssociatedObject(notesNameRef, ic);			objectName = data.getCharacterName(ic);		}		else {			anv = (AttachedNotesVector)data.getCellObject(notesNameRef, ic, it);			objectName = data.getCharacterName(ic) + " in " + data.getTaxa().getTaxonName(it);		}						panel.setTitle("Annotations");		String notes = "";		if (anv != null && anv.getNumNotes()>0){			for (int i = 0; i< anv.getNumNotes(); i++) {				AttachedNote note = anv.getAttachedNote(i);				String c = note.getComment();				String cont = "";				if (!StringUtil.blank(note.getImagePath()))					cont += "<font color =\"#0088AA\"> (Image) </font> "  ;				if (!StringUtil.blank(note.getComment()))					cont += note.getComment();				if (!StringUtil.blank(note.getReference()))					cont += " (Ref: " + note.getReference() + ")";				if (!StringUtil.blank(note.getAuthorName()))					cont += " <strong>(" + note.getAuthorName() + ")</strong>";				if (!StringUtil.blank(cont))					notes += "<li>" + cont + "</li>";							}		}		if (!StringUtil.blank(notes))			notes = "<html><h3>Notes for " + objectName + "</h3><ul>" + notes + "</ul></html>";		else			notes = "<html><h3>No annotations for "+ objectName +  "</h3></html>";		resetTextCommand.doItMainThread(ParseUtil.tokenize(notes), null, false, false);		//panel.repaint();   	}	/*.................................................................................................................*/    	 public String getName() {		return "Data Annotations Info";   	 }	/*.................................................................................................................*/  	 public String getVersion() {		return null;   	 }   	 	public void panelGoAway(Panel p){		showPanel.setValue(false);		setPanel();	}	/*.................................................................................................................*/  	 public String getExplanation() {		return "Installs a panel with information about annotations of a character matrix.";   	 }}